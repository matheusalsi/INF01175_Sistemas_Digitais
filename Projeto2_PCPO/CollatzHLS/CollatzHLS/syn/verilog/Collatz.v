// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Collatz,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.087000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=18,HLS_SYN_LUT=85,HLS_VERSION=2019_1}" *)

module Collatz (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        agg_result_steps,
        agg_result_steps_ap_vld,
        agg_result_greatest,
        agg_result_greatest_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] agg_result_steps;
output   agg_result_steps_ap_vld;
output  [7:0] agg_result_greatest;
output   agg_result_greatest_ap_vld;
input  [7:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg agg_result_steps_ap_vld;
reg agg_result_greatest_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] aux_4_fu_107_p3;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln10_fu_65_p2;
reg   [15:0] aux_0_reg_54;
wire   [14:0] aux_fu_75_p4;
wire   [15:0] shl_ln14_fu_89_p2;
wire   [15:0] sub_ln14_fu_95_p2;
wire   [0:0] trunc_ln10_fu_71_p1;
wire   [15:0] aux_2_fu_101_p2;
wire   [15:0] aux_1_fu_85_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_65_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        aux_0_reg_54 <= aux_4_fu_107_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        aux_0_reg_54 <= 16'd3;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        agg_result_greatest_ap_vld = 1'b1;
    end else begin
        agg_result_greatest_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        agg_result_steps_ap_vld = 1'b1;
    end else begin
        agg_result_steps_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_greatest = 8'd7;

assign agg_result_steps = 8'd16;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign aux_1_fu_85_p1 = aux_fu_75_p4;

assign aux_2_fu_101_p2 = (16'd1 + sub_ln14_fu_95_p2);

assign aux_4_fu_107_p3 = ((trunc_ln10_fu_71_p1[0:0] === 1'b1) ? aux_2_fu_101_p2 : aux_1_fu_85_p1);

assign aux_fu_75_p4 = {{aux_0_reg_54[15:1]}};

assign icmp_ln10_fu_65_p2 = ((aux_0_reg_54 == 16'd1) ? 1'b1 : 1'b0);

assign shl_ln14_fu_89_p2 = aux_0_reg_54 << 16'd2;

assign sub_ln14_fu_95_p2 = (shl_ln14_fu_89_p2 - aux_0_reg_54);

assign trunc_ln10_fu_71_p1 = aux_0_reg_54[0:0];

endmodule //Collatz
