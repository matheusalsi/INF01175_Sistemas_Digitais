// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Collatz.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Collatz::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Collatz::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> Collatz::ap_ST_fsm_state1 = "1";
const sc_lv<2> Collatz::ap_ST_fsm_state2 = "10";
const sc_lv<32> Collatz::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Collatz::ap_const_lv32_1 = "1";
const sc_lv<1> Collatz::ap_const_lv1_0 = "0";
const sc_lv<16> Collatz::ap_const_lv16_41 = "1000001";
const sc_lv<8> Collatz::ap_const_lv8_C4 = "11000100";
const sc_lv<1> Collatz::ap_const_lv1_1 = "1";
const sc_lv<8> Collatz::ap_const_lv8_1B = "11011";
const sc_lv<16> Collatz::ap_const_lv16_1 = "1";
const sc_lv<32> Collatz::ap_const_lv32_F = "1111";
const sc_lv<16> Collatz::ap_const_lv16_2 = "10";
const bool Collatz::ap_const_boolean_1 = true;

Collatz::Collatz(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_greatest);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_65_p2 );

    SC_METHOD(thread_agg_result_greatest_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_65_p2 );

    SC_METHOD(thread_agg_result_steps);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_65_p2 );

    SC_METHOD(thread_agg_result_steps_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_65_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_65_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_65_p2 );

    SC_METHOD(thread_aux_1_fu_85_p1);
    sensitive << ( aux_fu_75_p4 );

    SC_METHOD(thread_aux_2_fu_101_p2);
    sensitive << ( sub_ln14_fu_95_p2 );

    SC_METHOD(thread_aux_4_fu_107_p3);
    sensitive << ( trunc_ln10_fu_71_p1 );
    sensitive << ( aux_2_fu_101_p2 );
    sensitive << ( aux_1_fu_85_p1 );

    SC_METHOD(thread_aux_fu_75_p4);
    sensitive << ( aux_0_reg_54 );

    SC_METHOD(thread_icmp_ln10_fu_65_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( aux_0_reg_54 );

    SC_METHOD(thread_shl_ln14_fu_89_p2);
    sensitive << ( aux_0_reg_54 );

    SC_METHOD(thread_sub_ln14_fu_95_p2);
    sensitive << ( aux_0_reg_54 );
    sensitive << ( shl_ln14_fu_89_p2 );

    SC_METHOD(thread_trunc_ln10_fu_71_p1);
    sensitive << ( aux_0_reg_54 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_65_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Collatz_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, agg_result_steps, "(port)agg_result_steps");
    sc_trace(mVcdFile, agg_result_steps_ap_vld, "(port)agg_result_steps_ap_vld");
    sc_trace(mVcdFile, agg_result_greatest, "(port)agg_result_greatest");
    sc_trace(mVcdFile, agg_result_greatest_ap_vld, "(port)agg_result_greatest_ap_vld");
    sc_trace(mVcdFile, x, "(port)x");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, aux_4_fu_107_p3, "aux_4_fu_107_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln10_fu_65_p2, "icmp_ln10_fu_65_p2");
    sc_trace(mVcdFile, aux_0_reg_54, "aux_0_reg_54");
    sc_trace(mVcdFile, aux_fu_75_p4, "aux_fu_75_p4");
    sc_trace(mVcdFile, shl_ln14_fu_89_p2, "shl_ln14_fu_89_p2");
    sc_trace(mVcdFile, sub_ln14_fu_95_p2, "sub_ln14_fu_95_p2");
    sc_trace(mVcdFile, trunc_ln10_fu_71_p1, "trunc_ln10_fu_71_p1");
    sc_trace(mVcdFile, aux_2_fu_101_p2, "aux_2_fu_101_p2");
    sc_trace(mVcdFile, aux_1_fu_85_p1, "aux_1_fu_85_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Collatz.hdltvin.dat");
    mHdltvoutHandle.open("Collatz.hdltvout.dat");
}

Collatz::~Collatz() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void Collatz::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_65_p2.read(), ap_const_lv1_0))) {
        aux_0_reg_54 = aux_4_fu_107_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        aux_0_reg_54 = ap_const_lv16_41;
    }
}

void Collatz::thread_agg_result_greatest() {
    agg_result_greatest = ap_const_lv8_1B;
}

void Collatz::thread_agg_result_greatest_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_65_p2.read(), ap_const_lv1_1))) {
        agg_result_greatest_ap_vld = ap_const_logic_1;
    } else {
        agg_result_greatest_ap_vld = ap_const_logic_0;
    }
}

void Collatz::thread_agg_result_steps() {
    agg_result_steps = ap_const_lv8_C4;
}

void Collatz::thread_agg_result_steps_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_65_p2.read(), ap_const_lv1_1))) {
        agg_result_steps_ap_vld = ap_const_logic_1;
    } else {
        agg_result_steps_ap_vld = ap_const_logic_0;
    }
}

void Collatz::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Collatz::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Collatz::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_65_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Collatz::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Collatz::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_65_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Collatz::thread_aux_1_fu_85_p1() {
    aux_1_fu_85_p1 = esl_zext<16,15>(aux_fu_75_p4.read());
}

void Collatz::thread_aux_2_fu_101_p2() {
    aux_2_fu_101_p2 = (!ap_const_lv16_1.is_01() || !sub_ln14_fu_95_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_1) + sc_biguint<16>(sub_ln14_fu_95_p2.read()));
}

void Collatz::thread_aux_4_fu_107_p3() {
    aux_4_fu_107_p3 = (!trunc_ln10_fu_71_p1.read()[0].is_01())? sc_lv<16>(): ((trunc_ln10_fu_71_p1.read()[0].to_bool())? aux_2_fu_101_p2.read(): aux_1_fu_85_p1.read());
}

void Collatz::thread_aux_fu_75_p4() {
    aux_fu_75_p4 = aux_0_reg_54.read().range(15, 1);
}

void Collatz::thread_icmp_ln10_fu_65_p2() {
    icmp_ln10_fu_65_p2 = (!aux_0_reg_54.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<1>(): sc_lv<1>(aux_0_reg_54.read() == ap_const_lv16_1);
}

void Collatz::thread_shl_ln14_fu_89_p2() {
    shl_ln14_fu_89_p2 = (!ap_const_lv16_2.is_01())? sc_lv<16>(): aux_0_reg_54.read() << (unsigned short)ap_const_lv16_2.to_uint();
}

void Collatz::thread_sub_ln14_fu_95_p2() {
    sub_ln14_fu_95_p2 = (!shl_ln14_fu_89_p2.read().is_01() || !aux_0_reg_54.read().is_01())? sc_lv<16>(): (sc_biguint<16>(shl_ln14_fu_89_p2.read()) - sc_biguint<16>(aux_0_reg_54.read()));
}

void Collatz::thread_trunc_ln10_fu_71_p1() {
    trunc_ln10_fu_71_p1 = aux_0_reg_54.read().range(1-1, 0);
}

void Collatz::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln10_fu_65_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void Collatz::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_steps\" :  \"" << agg_result_steps.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_steps_ap_vld\" :  \"" << agg_result_steps_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_greatest\" :  \"" << agg_result_greatest.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_greatest_ap_vld\" :  \"" << agg_result_greatest_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

